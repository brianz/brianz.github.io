<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rds on Brian Z</title>
    <link>http://blog.brianz.bz/tags/rds/</link>
    <description>Recent content in Rds on Brian Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 17 Aug 2018 16:02:53 -0600</lastBuildDate>
    
	<atom:link href="http://blog.brianz.bz/tags/rds/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing Database Transactions with SQLAlchemy in Serverless</title>
      <link>http://blog.brianz.bz/post/serverless-how-to-handle-db-transactions/</link>
      <pubDate>Fri, 17 Aug 2018 16:02:53 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-how-to-handle-db-transactions/</guid>
      <description>For quite some time, SQLAlchemy has been my go-to database toolkit and ORM for Python microservices and Serverless projects. SQLAlchemy is very powerful and has given me the ability to do pretty much anything I need to do with Postgres, my database of choice nowadays. Of course, the trade off of great power and flexibility is increased complexity. Since SQLAlchemy is a bit more low-level than other ORMs (such as Django, or even Flask&amp;rsquo;s layer on top of SQLAlchemy) you&amp;rsquo;re on the hook for dealing with some details that these other ORMs handle automatically.</description>
    </item>
    
  </channel>
</rss>