<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on Brian Z</title>
    <link>http://blog.brianz.bz/tags/aws/</link>
    <description>Recent content in Aws on Brian Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 02 Jun 2016 17:01:36 -0600</lastBuildDate>
    <atom:link href="http://blog.brianz.bz/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Serverless part III</title>
      <link>http://blog.brianz.bz/post/serverless-part-iii/</link>
      <pubDate>Thu, 02 Jun 2016 17:01:36 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-iii/</guid>
      <description>

&lt;p&gt;This is part three in my series about creating serverless systems using AWS API Gateway + Lambda
via the &lt;a href=&#34;http://serverless.com&#34; target=&#34;_blank&#34;&gt;Serverless&lt;/a&gt; project. If you&amp;rsquo;re haven&amp;rsquo;t already you can read
&lt;a href=&#34;http://blog.brianz.bz/post/serverless-part-i/&#34; target=&#34;_blank&#34;&gt;part I&lt;/a&gt; and &lt;a href=&#34;http://blog.brianz.bz/post/serverless-part-ii/&#34; target=&#34;_blank&#34;&gt;part II&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My goal is to continue evolving this example to walk through a non-trivial example of doing
something with the serverless architecture. Along the way I&amp;rsquo;ll demo some useful features which
you&amp;rsquo;ll undoubtedly run into when doing real development with Serverless.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be covering two topics in this post:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API Gateway Stages&lt;/li&gt;
&lt;li&gt;Managing configuration with variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;api-gateway-stages:48f3c93668433bcff400a726b76f0ce0&#34;&gt;API Gateway Stages&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re new to API Gateway and Lambda an obvious question you may ask is, &amp;ldquo;How do I setup
different deployments for my Serverless system?&amp;rdquo;  Coming from a traditional setup most everyone
will spin up different stacks/servers for their QA, Staging and Production environments.  However,
with a serverless project, how to you go about the same thing?&lt;/p&gt;

&lt;p&gt;The answer to this are API Gateway stages. &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/stages.html&#34; target=&#34;_blank&#34;&gt;You can read the
docs&lt;/a&gt; but I&amp;rsquo;ll try to
distill down the big concepts&amp;hellip;it&amp;rsquo;s not that complicated to grok.&lt;/p&gt;

&lt;p&gt;With Gateway, a Stage is analogous to an &amp;ldquo;environment&amp;rdquo; if you&amp;rsquo;re running your own system.  For
example, in a given AWS account you may want to run and manage your Serverless project as one unit
but manage your QA and Production environments separately.  Of course, any new code or
configuration changes you would first deploy to your QA Stage. Once you were confident things were
working you&amp;rsquo;d then roll out those same changes to your Production Stage.  Again, the analogy here
is that you&amp;rsquo;re deploying code to different and separate systems.  Another scenario is multiple
developers working on the same project&amp;hellip;each developer could have their own stage which would
eliminate stepping on each other while doing development.  API Gateway gives us this ability
(and more) via Stages.&lt;/p&gt;

&lt;p&gt;By default, you&amp;rsquo;ll get a &lt;code&gt;dev&lt;/code&gt; stage when setting up a new Serverless project. Let&amp;rsquo;s create a new
stage which we&amp;rsquo;ll call &lt;code&gt;production&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember, I&amp;rsquo;m using a Docker container to execute all of my Serverless commands.  You can follow
along by &lt;a href=&#34;https://github.com/brianz/serverless-demo/tree/part-iii&#34; target=&#34;_blank&#34;&gt;checking out the repository&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@gold(master=)$ make shell
docker run --rm -it \
        -v `pwd`:/code \
        --name=slsdemo &amp;quot;bz/serverless&amp;quot; bash
root@8941047f877c:/code# 
root@7c84db71d474:/code/serverless-demo# sls stage create   
Serverless: Enter a new stage name for this project:  (dev) production
Serverless: For the &amp;quot;production&amp;quot; stage, do you want to use an existing Amazon Web Services profile
or create a new one?
  &amp;gt; Existing Profile
    Create A New Profile
Serverless: Select a profile for your project: 
  &amp;gt; default
Serverless: Creating stage &amp;quot;production&amp;quot;...  
Serverless: Select a new region for your stage: 
    us-east-1
  &amp;gt; us-west-2
    eu-west-1
    eu-central-1
    ap-northeast-1
Serverless: Creating region &amp;quot;us-west-2&amp;quot; in stage &amp;quot;production&amp;quot;...  
Serverless: Deploying resources to stage &amp;quot;production&amp;quot; in region &amp;quot;us-west-2&amp;quot; via Cloudformation (~3 minutes)...  
Serverless: Successfully deployed &amp;quot;production&amp;quot; resources to &amp;quot;us-west-2&amp;quot;  
Serverless: Successfully created region &amp;quot;us-west-2&amp;quot; within stage &amp;quot;production&amp;quot;  
Serverless: Successfully created stage &amp;quot;production&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! Remembering back, creating this new stage is akin to creating a new project.  We don&amp;rsquo;t
actually have anything behind the scenes&amp;hellip;we just have scaffolding in place so that we can deploy
some stuff.  So, let&amp;rsquo;s deploy our existing &lt;code&gt;hello&lt;/code&gt; function and endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@7c84db71d474:/code/serverless-demo# sls dash deploy
Serverless: Select the assets you wish to deploy:
    hello
      &amp;gt; function - hello
      &amp;gt; endpoint - hello - GET
    - - - - -
  &amp;gt; Deploy
    Cancel

Serverless: Choose a Stage: 
    1) dev
  &amp;gt; 2) production
Serverless: Deploying the specified functions in &amp;quot;production&amp;quot; to the following regions: us-west-2  
Serverless: ------------------------  
Serverless: Successfully deployed the following functions in &amp;quot;production&amp;quot; to the following regions:   
Serverless: us-west-2 ------------------------  
Serverless:   hello (serverless-demo-hello):
arn:aws:lambda:us-west-2:123874195435:function:serverless-demo-hello:production  

Serverless: Deploying endpoints in &amp;quot;production&amp;quot; to the following regions: us-west-2  
Serverless: Successfully deployed endpoints in &amp;quot;production&amp;quot; to the following regions:  
Serverless: us-west-2 ------------------------  
Serverless:   GET - hello - https://4m98c4l3i1.execute-api.us-west-2.amazonaws.com/production/hello  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, note that I&amp;rsquo;m deploying to the &lt;code&gt;production&lt;/code&gt; stage.  Down below Serverless spit out a new URL
which we can use to hit.&lt;/p&gt;

&lt;p&gt;Behind the scenes, what is actually happening is that Serverless is instruction API Gateway and
Lambda to do several things&amp;hellip;one of which is creating new versions of your Lambda function. Once
the new Lambda version is available, API Gateway will be pointed to that new version via a Lambda
Alias.  API Gateway has a notion of a Stage Variable. As an example, our &lt;code&gt;production&lt;/code&gt; stage will
have a Stage Variable of &lt;code&gt;functionAlias = production&lt;/code&gt;.  That means that this stage will point to
the &lt;code&gt;production&lt;/code&gt; alias of our lambda function.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s quite interesting how it&amp;rsquo;s all orchestrated and I&amp;rsquo;d recommend &lt;a href=&#34;http://docs.serverless.com/docs/workflow#deploying-your-functions&#34; target=&#34;_blank&#34;&gt;reading the
Serverless docs&lt;/a&gt; and playing
around to see for yourself what changes in the AWS console as you deploy code.&lt;/p&gt;

&lt;h2 id=&#34;managing-configuration-with-variables:48f3c93668433bcff400a726b76f0ce0&#34;&gt;Managing configuration with variables&lt;/h2&gt;

&lt;p&gt;Now that we have two different stages let&amp;rsquo;s show that they are indeed separated and can be
controlled independently. What we&amp;rsquo;ll do is actually print out the name of the stage from our Lambda function.
This is really easy to do thanks to &lt;a href=&#34;http://docs.serverless.com/docs/function-configuration&#34; target=&#34;_blank&#34;&gt;Serverless variables&lt;/a&gt;.  These are settings
which can be unique for a given deployment&amp;hellip;think about a database username, an API key for a 3rd
party system, etc. When rolling out different versions of your code you&amp;rsquo;ll inevitably require each
one to use specific settings.&lt;/p&gt;

&lt;p&gt;Crack open &lt;code&gt;s-function.json&lt;/code&gt; and grep for &lt;code&gt;environment&lt;/code&gt;&amp;hellip;you&amp;rsquo;ll see that Serverless is referencing
three different environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;environment&amp;quot;: {
    &amp;quot;SERVERLESS_PROJECT&amp;quot;: &amp;quot;${project}&amp;quot;,
    &amp;quot;SERVERLESS_STAGE&amp;quot;: &amp;quot;${stage}&amp;quot;,
    &amp;quot;SERVERLESS_REGION&amp;quot;: &amp;quot;${region}&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are simple key/value pairs which Serverless will send over to Lamda when doing a
deployment. Here, the &amp;ldquo;values&amp;rdquo; are being referenced by some magic serverless variables with the
&lt;code&gt;${thing}&lt;/code&gt; syntax.  What is actually populating the values?  The answer lies in the &lt;code&gt;_meta&lt;/code&gt;
directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@gold(master=)$ ls -l
total 40
-rw-r--r--  1 brianz  staff   34 Jun  2 15:22 s-variables-common.json
-rw-r--r--  1 brianz  staff  220 Jun  2 15:22 s-variables-dev-uswest2.json
-rw-r--r--  1 brianz  staff   50 Jun  2 15:22 s-variables-dev.json
-rw-r--r--  1 brianz  staff  234 Jun  2 15:27 s-variables-production-uswest2.json
-rw-r--r--  1 brianz  staff   27 Jun  2 15:25 s-variables-production.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here that for each stage we have two different files. The files with the region name
contains some meta data about our deployments&amp;hellip;for now, we&amp;rsquo;re more interested in the
&lt;code&gt;s-variables-production.json&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@gold(master=)$ grep stage *
s-variables-dev.json:  &amp;quot;stage&amp;quot;: &amp;quot;dev&amp;quot;,
s-variables-production.json:  &amp;quot;stage&amp;quot;: &amp;quot;production&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, the &lt;code&gt;stage&lt;/code&gt; variable is automatically set in these files.&lt;/p&gt;

&lt;p&gt;Now, you may think that these variables are being set and uploaded to AWS somewhere via Stage
Variables or the like. I definitely thought that&amp;hellip;but I was wrong. Environment variables which you
define and use in Serverless like this are actually injected into your Lambda handler upon
deployment.  You can &lt;a href=&#34;http://docs.serverless.com/docs/workflow#deploying-your-functions&#34; target=&#34;_blank&#34;&gt;read all about it in the Serverless
docs&lt;/a&gt;. The key is this single
bullet point:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your regular handler file is replaced by one that Serverless adds titled _serverless_handler, which
contains your Function&amp;rsquo;s Environment Variables in-lined in the code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Serverless actually gives us a &lt;em&gt;new&lt;/em&gt; Lambda handler with the environment variables injected to
&lt;code&gt;os.environ&lt;/code&gt; before calling our &lt;a href=&#34;https://github.com/brianz/serverless-demo/blob/cccda988e257423348c87c87983a4f7c4add401d/serverless-demo/src/hello/handler.py#L12&#34; target=&#34;_blank&#34;&gt;Python handler&lt;/a&gt;.
.Getting access to the values is quite easy&amp;hellip;it&amp;rsquo;s just the stock Python way of getting stuff from
the environment Here&amp;rsquo;s the change we&amp;rsquo;ll make to get the stage name and return it in the HTML message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def handler(event, context):
    value = os.environ.get(&#39;SERVERLESS_STAGE&#39;, &#39;&#39;)
    return &amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Hello from Serverless/API Gateway/Lambda&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;SERVERLESS_STAGE: %s&amp;lt;/h2&amp;gt;
        &amp;lt;h2&amp;gt;Event:&amp;lt;/h2&amp;gt;
        &amp;lt;pre&amp;gt;
            %s
        &amp;lt;/pre&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot; % (value, json.dumps(event), )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once that&amp;rsquo;s done I&amp;rsquo;ll &lt;code&gt;sls dash deploy&lt;/code&gt; for the &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; stages&amp;hellip;low and behold,
when I hit the two endpoint I get what I expect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.brianz.bz/images/serverless-demo-dev.png&#34; width=&#34;800&#34;&gt;
&lt;img src=&#34;http://blog.brianz.bz/images/serverless-demo-production.png&#34; width=&#34;800&#34;&gt;&lt;/p&gt;

&lt;p&gt;I think it&amp;rsquo;s interesting to look behind the scenes to see how this actually happened. When you
download the zip file containing your code which backs your lambda function you&amp;rsquo;ll see what your
rewritten handler actually looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@gold(master=)$ cat ~/Desktop/serverless-demo-hello-5b5a957b-4073-43fd-8b76-d315422fd269/_serverless_handler.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;import os, sys
os.environ[&#39;SERVERLESS_PROJECT&#39;] = str(&#39;serverless-demo&#39;)
os.environ[&#39;SERVERLESS_STAGE&#39;] = str(&#39;dev&#39;)
os.environ[&#39;SERVERLESS_REGION&#39;] = str(&#39;us-west-2&#39;)
os.environ[&#39;SERVERLESS_DATA_MODEL_STAGE&#39;] = str(&#39;dev&#39;)
here = os.path.dirname(os.path.realpath(__file__))
sys.path.append(here)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great&amp;hellip;we now know how to access environment variables and control deployments via stages. Let&amp;rsquo;s
do the work of adding some configuration of our own!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to add another reference in &lt;code&gt;handler.py&lt;/code&gt; to a new variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;magic = os.environ.get(&#39;MAGIC_VARIABLE&#39;, &#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other small change is simply putting it in the HTML output string.  I also will need to inject
this variable into the lambda function by adding it to &lt;code&gt;s-function.json&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;quot;environment&amp;quot;: {
    &amp;quot;MAGIC_VARIABLE&amp;quot;: &amp;quot;${magicVariable}&amp;quot;,
    // existing vars
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final step is setting these variable. Note here, we have a &lt;em&gt;single&lt;/em&gt; change to
&lt;code&gt;s-function.json&lt;/code&gt;&amp;hellip;it&amp;rsquo;s getting the actual value for &lt;code&gt;MAGIC_VARIABLE&lt;/code&gt; from the Serverless
framework.  We can control the value of &lt;code&gt;${magicVariable}&lt;/code&gt; by hooking into Serverless
configuration/variable files.  I&amp;rsquo;m going to add two different values&amp;hellip;one for each of our two
deployments. Open up &lt;code&gt;s-variables-production.json&lt;/code&gt; and &lt;code&gt;s-variables-dev.json&lt;/code&gt;. The &lt;code&gt;dev&lt;/code&gt; version
turns into this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;magicVariable&amp;quot;: &amp;quot;Not secret or important&amp;quot;,
  &amp;quot;stage&amp;quot;: &amp;quot;dev&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The production file has the same variable but of course with a different value.  Now let&amp;rsquo;s deploy
both of these and see what we get:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dev&lt;/code&gt;
&lt;img src=&#34;http://blog.brianz.bz/images/serverless-demo-magic-var-dev.png&#34; width=&#34;800&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;hellip;and, &lt;code&gt;production&lt;/code&gt;
&lt;img src=&#34;http://blog.brianz.bz/images/serverless-demo-magic-var-production.png&#34; width=&#34;800&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:48f3c93668433bcff400a726b76f0ce0&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We now know how to create different deployments and control them independently. I also explained
some of the voodoo going on behind the scenes. In Part IV I&amp;rsquo;ll cover some other features in the
Serverless ecosystem which allows for easier collaboration and syncing of sensitive data.
Hopefully, we can also start building out a more interesting demo which actually does something.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless part II</title>
      <link>http://blog.brianz.bz/post/serverless-part-ii/</link>
      <pubDate>Mon, 02 May 2016 22:08:40 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-ii/</guid>
      <description>

&lt;p&gt;Following up from my &lt;a href=&#34;http://blog.brianz.bz/post/serverless-part-i/&#34; target=&#34;_blank&#34;&gt;last post about serverless&lt;/a&gt; systems, let&amp;rsquo;s do
a walk-through of the &lt;a href=&#34;http://serverless.com&#34; target=&#34;_blank&#34;&gt;Serverless&lt;/a&gt; project.&lt;/p&gt;

&lt;h2 id=&#34;getting-started:0b254221062177bc7d224c33605af89c&#34;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;As usual I&amp;rsquo;ll demo this using a Docker container. You can check out the code on Github and follow
along: &lt;a href=&#34;https://github.com/brianz/serverless-demo&#34; target=&#34;_blank&#34;&gt;https://github.com/brianz/serverless-demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This Docker image has Serverless v0.5.5&amp;hellip;and that&amp;rsquo;s about it.
I use a basic &lt;code&gt;Makefile&lt;/code&gt; to build and run the container. You can take a
look at it yourself and change the container name if you&amp;rsquo;d like to follow along.&lt;/p&gt;

&lt;p&gt;I also recommend reading the &lt;a href=&#34;http://docs.serverless.com/docs/configuring-aws&#34; target=&#34;_blank&#34;&gt;getting started docs on the serverless
website&lt;/a&gt;, perhaps in parallel with this blog post
in case I have missed any details.&lt;/p&gt;

&lt;h3 id=&#34;prerequisites:0b254221062177bc7d224c33605af89c&#34;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re following along, you should create two files alongside the Makefile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two files will be copied to &lt;code&gt;/root/.aws/&lt;/code&gt; when you build the Docker image.&lt;/p&gt;

&lt;p&gt;These should have the following contents which will be specific to you:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;credentials&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
aws_access_key_id=YOUR_AWS_ACCESS_KEY
aws_secret_access_key=YOUR_AWS_SECRET_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;config&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
region=YOUR_PREFERRED_REGION(ex. us-west-2)
output=json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;really-getting-started:0b254221062177bc7d224c33605af89c&#34;&gt;Really getting started&lt;/h2&gt;

&lt;p&gt;With that out of the way, fire up your container and let&amp;rsquo;s take this for a spin. To build the
container just type &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline(master)$ make
brianz@bz-cconline(master)$ # lots of output
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that you can start the container with &lt;code&gt;make shell&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline(master)$ make shell
docker run --rm -it \
        -v `pwd`:/code \
        --name=slsdemo &amp;quot;bz/serverless&amp;quot; bash
root@8b733bf6a50a:/code# 
root@ea44710fc5db:/code# sls --version
0.5.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the code in this directory is being mapped to &lt;code&gt;/code&lt;/code&gt; on the container. This is one of
my favorite Docker tricks and will help here since anything we do with the &lt;code&gt;serverless&lt;/code&gt; or &lt;code&gt;sls&lt;/code&gt;
commands will write files to our &lt;em&gt;local&lt;/em&gt; file system but be visible in the running container.
Serverless is largely/completely controlled by writing and reading files on the local file system.
By mapping the &lt;code&gt;/code&lt;/code&gt; directory on the Docker container to our host system&amp;rsquo;s we&amp;rsquo;re ensured we
won&amp;rsquo;t lose all of our work/files when we stop the container.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-project:0b254221062177bc7d224c33605af89c&#34;&gt;Starting a project&lt;/h2&gt;

&lt;p&gt;We can now start setting up a new serverless project. It&amp;rsquo;s
important to understand that Serverless is coordinating &lt;em&gt;both&lt;/em&gt; AWS API Gateway and AWS Lambda for
us. When executing commands with Serverless it may be hard to know exactly what&amp;rsquo;s being done behind
the scenes. I&amp;rsquo;d recommend looking at both API Gateway and Lambda in the AWS Console to see what
affect your commands have on those services.&lt;/p&gt;

&lt;p&gt;The first thing we&amp;rsquo;ll do is create a new project which will bootstrap the entire project.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@48f5e89483ac:/code# serverless project create
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.5.5
`-------&#39;

Serverless: Initializing Serverless Project...  
Serverless: Enter a name for this project:  (serverless-rjdqri) serverless-demo
Serverless: Enter a new stage name for this project:  (dev) 
Serverless: For the &amp;quot;dev&amp;quot; stage, do you want to use an existing Amazon Web Services profile or
create a new one?
  &amp;gt; Existing Profile
    Create A New Profile
Serverless: Select a profile for your project: 
  &amp;gt; default
Serverless: Creating stage &amp;quot;dev&amp;quot;...  
Serverless: Select a new region for your stage: 
    us-east-1
  &amp;gt; us-west-2
    eu-west-1
    eu-central-1
    ap-northeast-1
Serverless: Creating region &amp;quot;us-west-2&amp;quot; in stage &amp;quot;dev&amp;quot;...  
Serverless: Deploying resources to stage &amp;quot;dev&amp;quot; in region &amp;quot;us-west-2&amp;quot; via Cloudformation (~3
minutes)...  
Serverless: No resource updates are to be performed.  
Serverless: Successfully created region &amp;quot;us-west-2&amp;quot; within stage &amp;quot;dev&amp;quot;  
Serverless: Successfully created stage &amp;quot;dev&amp;quot;  
Serverless: Successfully initialized project &amp;quot;serverless-demo&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should be noted that the the step asking about the AWS Profile (where I select &amp;ldquo;Existing
Profile&amp;rdquo;) was reading from our previously configured
&lt;code&gt;credentials&lt;/code&gt; file. You could also bypass this step and instead type in your AWS credentials by
selecting &lt;code&gt;Create A New Profile&lt;/code&gt;. This will save your AWS credentials in a filed named &lt;code&gt;admin.env&lt;/code&gt;.
Setting up profiles the &lt;code&gt;admin.env&lt;/code&gt; file instead references your named profile stored in your home
directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@48f5e89483ac:/code/serverless-demo# cat admin.env 
AWS_DEV_PROFILE=defaultroot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OK, so what just happened?  Let&amp;rsquo;s take it slow&amp;hellip;.a new project folder will now exist which is the
name of your project. From now on you&amp;rsquo;ll need to be in this directory when executing any
&lt;code&gt;serverless&lt;/code&gt; commands (or the alias, &lt;code&gt;sls&lt;/code&gt;). Let&amp;rsquo;s have a look inside:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@c477313ae84f:/code# cd serverless-demo/
root@c477313ae84f:/code/serverless-demo# ls -l
total 16
drwxr-xr-x 1 1000 staff  136 Apr 18 22:46 _meta
-rw-r--r-- 1 1000 staff   35 Apr 18 22:46 admin.env
-rw-r--r-- 1 1000 staff  287 Apr 18 22:45 package.json
-rw-r--r-- 1 1000 staff   64 Apr 18 22:45 s-project.json
-rw-r--r-- 1 1000 staff 1527 Apr 18 22:45 s-resources-cf.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what exactly are all of these files? Serverless works by creating and reading files on your
local system.  These files server different purposes but in the end are used to compose API calls
to Amazon. For example, have a look at &lt;code&gt;s-resource-cf.json&lt;/code&gt;&amp;hellip;this is the Cloudformation template
which Serverless used to create various resources for you. By looking at it, you can see exactly
what &lt;code&gt;serverless create project&lt;/code&gt; actually did.  As you can see, we don&amp;rsquo;t have much now other than
some IAM stuff. If you browse the AWS console you will see that there is a Cloudformation stack
matching what you see in &lt;code&gt;s-resources-cf.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we&amp;rsquo;re bootstrapped let&amp;rsquo;s get to something more fun.&lt;/p&gt;

&lt;h2 id=&#34;create-a-function-and-endpoint:0b254221062177bc7d224c33605af89c&#34;&gt;Create a function and endpoint&lt;/h2&gt;

&lt;p&gt;Next up, we need to actually create a Lambda function. Again, remember that at this point we really
have nothing to use..just some IAM roles.&lt;/p&gt;

&lt;p&gt;Your source code can go anywhere really&amp;hellip;but what I&amp;rsquo;ll do here is create a &lt;code&gt;lib&lt;/code&gt; directory to hold
any library dependencies (which we&amp;rsquo;ll use later) and a &lt;code&gt;src&lt;/code&gt; directory which is where we&amp;rsquo;ll put our
own source code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@c477313ae84f:/code/serverless-demo# mkdir lib src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we&amp;rsquo;re ready to create our own Lambda function which will be a Python 2.7 function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@c477313ae84f:/code/serverless-demo# sls function create src/hello
Serverless: Please, select a runtime for this new Function
    nodejs4.3
  &amp;gt; python2.7
    nodejs (v0.10, soon to be deprecated)
Serverless: For this new Function, would you like to create an Endpoint, Event, or just the
Function?
  &amp;gt; Create Endpoint
    Create Event
    Just the Function...
Serverless: Successfully created function: &amp;quot;src/hello&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last question isn&amp;rsquo;t quite intuitive. What exactly is serverless asking you?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Create Endpoint&lt;/code&gt;: Will create &lt;em&gt;both&lt;/em&gt; an API Gateway endpoint plus the Lambda function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Create Event&lt;/code&gt;: Will create a Lambda function which is setup to be triggered on a schedule or
from another type of event (&lt;strong&gt;not&lt;/strong&gt; from API Gateway)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Just the Function...&lt;/code&gt;: Will create &lt;em&gt;just&lt;/em&gt; the Lambda function leaving it up to you to setup
how/when it&amp;rsquo;s triggered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we have some Python code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@c477313ae84f:/code/serverless-demo# ls -l src/hello/
total 12
-rw-r--r-- 1 1000 staff    2 Apr 18 22:53 event.json
-rw-r--r-- 1 1000 staff  226 Apr 18 22:53 handler.py
-rw-r--r-- 1 1000 staff 1198 Apr 18 22:53 s-function.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Have a look at the code in &lt;code&gt;handler.py&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import print_function

import json
import logging

log = logging.getLogger()
log.setLevel(logging.DEBUG)

def handler(event, context):
    log.debug(&amp;quot;Received event {}&amp;quot;.format(json.dumps(event)))
    return {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you&amp;rsquo;re unfamiliar with Lambda just know that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a function which accepts two params, &lt;code&gt;event&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;map the name of the file/function when creating the Lambda so Lambda knows what to execute&lt;/li&gt;
&lt;li&gt;can use any library you need provided you can zip it up in a single zip file and upload it to
Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function is a bit boring&amp;hellip;let&amp;rsquo;s change the return value to be more fun:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # stuff
    return {&#39;message&#39;: &#39;Serverless is the future!&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, for the curious browse over to the AWS Lambda page in the AWS Console.  Note, &lt;strong&gt;your new hello
function isn&amp;rsquo;t there!&lt;/strong&gt;.  Why is this?  Well, Serverless has just set things up for you on your
local system but you haven&amp;rsquo;t pushed it to AWS yet.&lt;/p&gt;

&lt;p&gt;To get your code running, we need to &lt;em&gt;deploy&lt;/em&gt; it.&lt;/p&gt;

&lt;h2 id=&#34;deploying-an-endpoint:0b254221062177bc7d224c33605af89c&#34;&gt;Deploying an endpoint&lt;/h2&gt;

&lt;p&gt;Now for the fun part&amp;hellip;we&amp;rsquo;re going to tell Serverless to package up our code, upload it to Lambda
and create us a new endpoint with API Gateway.  Sounds complicated and indeed, if you did this by
hand there are several clicks and &lt;code&gt;zip&lt;/code&gt; commands to take care of. Let&amp;rsquo;s see how easy it is with
Serverless.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@3ce920c5854d:/code/serverless-demo# sls dash deploy
 _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v0.5.5
`-------&#39;

Use the &amp;lt;up&amp;gt;, &amp;lt;down&amp;gt;, &amp;lt;pageup&amp;gt;, &amp;lt;pagedown&amp;gt;, &amp;lt;home&amp;gt;, and &amp;lt;end&amp;gt; keys to navigate.
Press &amp;lt;enter&amp;gt; to select/deselect, or &amp;lt;space&amp;gt; to select/deselect and move down.
Press &amp;lt;ctrl&amp;gt; + a to select all, and &amp;lt;ctrl&amp;gt; + d to deselect all.
Press &amp;lt;ctrl&amp;gt; + f to select all functions, and &amp;lt;ctrl&amp;gt; + e to select all endpoints.
Press &amp;lt;ctrl&amp;gt; + &amp;lt;enter&amp;gt; to immediately deploy selected.
Press &amp;lt;escape&amp;gt; to cancel.


Serverless: Select the assets you wish to deploy:
    hello
      function - hello
      endpoint - hello - GET
    - - - - -
  &amp;gt; Deploy
    Cancel

Serverless: Deploying the specified functions in &amp;quot;dev&amp;quot; to the following regions: us-west-2  
Serverless: ------------------------  
Serverless: Successfully deployed the following functions in &amp;quot;dev&amp;quot; to the following regions:   
Serverless: us-west-2 ------------------------  
Serverless:   hello (serverless-demo-hello):
arn:aws:lambda:us-west-2:123874195435:function:serverless-demo-hello:dev  

Serverless: Deploying endpoints in &amp;quot;dev&amp;quot; to the following regions: us-west-2  
Serverless: Successfully deployed endpoints in &amp;quot;dev&amp;quot; to the following regions:  
Serverless: us-west-2 ------------------------  
Serverless:   GET - hello - https://4m98c4l3i1.execute-api.us-west-2.amazonaws.com/dev/hello 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can&amp;rsquo;t see it in the syntax highlighting above, but it&amp;rsquo;s important to deploy &lt;strong&gt;both&lt;/strong&gt; the
&lt;code&gt;function&lt;/code&gt; and the &lt;code&gt;endpoint&lt;/code&gt;.  Here&amp;rsquo;s how that breaks down and what those two things means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;function&lt;/code&gt;: Upload your &lt;code&gt;hello.py&lt;/code&gt; function to Lambda. Serverless takes care of the packaging,
upload, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;: Create/update the API Gateway endpoint which will be responsible for calling the
&lt;code&gt;hello.py&lt;/code&gt; function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that we get a URL&amp;hellip;let&amp;rsquo;s test it out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline(master)$ curl https://4m98c4l3i1.execute-api.us-west-2.amazonaws.com/dev/hello &amp;amp;&amp;amp; echo
{&amp;quot;message&amp;quot;: &amp;quot;Serverless is the future!&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice!  You can see that it just returns a our fun message, but hot damned, it worked! Let&amp;rsquo;s add a
&lt;code&gt;-v&lt;/code&gt; to see the details from the request:o&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline(master)$ curl -v https://4m98c4l3i1.execute-api.us-west-2.amazonaws.com/dev/hello &amp;amp;&amp;amp; echo
*   Trying 54.192.137.191...
* Connected to 4m98c4l3i1.execute-api.us-west-2.amazonaws.com (54.192.137.191) port 443 (#0)
* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
* Server certificate: *.execute-api.us-west-2.amazonaws.com
* Server certificate: Symantec Class 3 Secure Server CA - G4
* Server certificate: VeriSign Class 3 Public Primary Certification Authority - G5
&amp;gt; GET /dev/hello HTTP/1.1
&amp;gt; Host: 4m98c4l3i1.execute-api.us-west-2.amazonaws.com
&amp;gt; User-Agent: curl/7.43.0
&amp;gt; Accept: */*
&amp;gt; 
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Content-Type: application/json;charset=UTF-8
&amp;lt; Content-Length: 40
&amp;lt; Connection: keep-alive
&amp;lt; Date: Tue, 03 May 2016 02:47:27 GMT
&amp;lt; x-amzn-RequestId: 5f2a649a-10d9-11e6-b880-9737ae2ed884
&amp;lt; X-Cache: Miss from cloudfront
&amp;lt; Via: 1.1 b67f54b549c6579a21be3a5a67642d7a.cloudfront.net (CloudFront)
&amp;lt; X-Amz-Cf-Id: 8SqEhohANyUqXGf-uvv9_-dsJLU2SZBvAHCrU1B1d3sIqARCt-weuQ==
&amp;lt; 
* Connection #0 to host 4m98c4l3i1.execute-api.us-west-2.amazonaws.com left intact
{&amp;quot;message&amp;quot;: &amp;quot;Serverless is the future!&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that our &lt;code&gt;Content-Type&lt;/code&gt; header is being returned as &lt;code&gt;application/json;charset=UTF-8&lt;/code&gt;. This
works quite well for us in this case since our Lambda function returned a Python dictionary and
apparently it&amp;rsquo;s getting cast to a JSON object somewhere along the way. Here is where the details of
API Gateway come into play.  Let&amp;rsquo;s assume we wanted our API to return HTML&amp;hellip;how would we do that?&lt;/p&gt;

&lt;h2 id=&#34;update-and-deploy-a-function:0b254221062177bc7d224c33605af89c&#34;&gt;Update and deploy a function&lt;/h2&gt;

&lt;p&gt;With our goal of returning HTML, let&amp;rsquo;s update our function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def handler(event, context):
    return &amp;quot;&amp;quot;&amp;quot;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Hello from Serverless/API Gateway/Lambda&amp;lt;/h1&amp;gt;
        &amp;lt;h2&amp;gt;Event:&amp;lt;/h2&amp;gt;
        &amp;lt;pre&amp;gt;
            %s
        &amp;lt;/pre&amp;gt;
        &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;&amp;quot;&amp;quot;&amp;quot; % (json.dumps(event), )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;rsquo;ll do now is deploy this. Note, the analogy here is rolling out new code. Think about how
complicated that normally is with a traditional web application.  Undoubtedly there are scripts,
CI systems and the like who are tasked with rolling out your new code. Here, we&amp;rsquo;re going to roll
out our code with one small command and it will take mere seconds:&lt;/p&gt;

&lt;p&gt;Note, some text removed for brevity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@3ce920c5854d:/code/serverless-demo# sls dash deploy
Serverless: Select the assets you wish to deploy:
    hello
      &amp;gt; function - hello
      endpoint - hello - GET
    - - - - -
  &amp;gt; Deploy
    Cancel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We select &lt;em&gt;just&lt;/em&gt; the function since our API Gateway endpoint isn&amp;rsquo;t changing at all. This took about
20 seconds for me and I&amp;rsquo;ve seen it go faster and slower&amp;hellip;but I&amp;rsquo;ve never seen it take longer than
a minute or so. Once we start pushing up Lambda functions with more requirements the zip files will
be larger and uploads will take slightly longer.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s load it in browser and see what we get now!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;lt;html&amp;gt;\n    &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;\n    &amp;lt;body&amp;gt;\n        &amp;lt;h1&amp;gt;Hello from Serverless/API Gateway/Lambda&amp;lt;/h1&amp;gt;\n
&amp;lt;h2&amp;gt;Event:&amp;lt;/h2&amp;gt;\n        &amp;lt;pre&amp;gt;\n            {}\n        &amp;lt;/pre&amp;gt;\n        &amp;lt;/body&amp;gt;\n    &amp;lt;/html&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hrm. Not exactly what we were hoping for.&lt;/p&gt;

&lt;p&gt;Remember our &lt;code&gt;Content-Type&lt;/code&gt; header? Let&amp;rsquo;s see what it is now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline(master)$ curl -v -s https://4m98c4l3i1.execute-api.us-west-2.amazonaws.com/dev/hello 2&amp;gt;&amp;amp;1 | grep Content-Type
&amp;lt; Content-Type: application/json;charset=UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yup&amp;hellip;my browser isn&amp;rsquo;t parsing this because it thinks it&amp;rsquo;s JSON. To solve this we need to tell API
Gateway to return &lt;code&gt;text/html&lt;/code&gt;. Honestly, this is &lt;strong&gt;way&lt;/strong&gt; harder than it should be. By default we
saw that API Gateway is setup to return &lt;code&gt;application/json&lt;/code&gt; which worked great out of the box. To
make it return &lt;code&gt;text/html&lt;/code&gt; is much more convoluted and not intuitive in the least. To do this we&amp;rsquo;ll
need to tweak the mappings in API Gateway via the &lt;code&gt;s-function.json&lt;/code&gt; file. I&amp;rsquo;m not going to explain
the details for now mostly because I&amp;rsquo;m still figuring out exactly how these mapping work. For now,
here are the lines you&amp;rsquo;ll need to change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;responses&amp;quot;: {
    &amp;quot;400&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: &amp;quot;400&amp;quot;
},  
&amp;quot;default&amp;quot;: {
    &amp;quot;statusCode&amp;quot;: &amp;quot;200&amp;quot;,
    &amp;quot;responseParameters&amp;quot;: {
        &amp;quot;method.response.header.Content-Type&amp;quot;: &amp;quot;&#39;text/html&#39;&amp;quot;
    },  
    &amp;quot;responseTemplates&amp;quot;: {
        &amp;quot;text/html&amp;quot;: &amp;quot;$input.path(&#39;$&#39;)&amp;quot;
    }   
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The lines are those with &lt;code&gt;text/html&lt;/code&gt; in them. Now, we just &lt;code&gt;sls dash deploy&lt;/code&gt; again, select just the
endpoint and refresh our browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.brianz.bz/images/api-gateway-in-browser-success.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;h2 id=&#34;summary:0b254221062177bc7d224c33605af89c&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Serverless is quite amazing and I&amp;rsquo;m very excited by this project. When building SAAS applications
it&amp;rsquo;s quite obvious how much power and flexibility this gives us. Of course, there are limitations
to this type of system and not all problems can be solved with Serverless&amp;hellip;but a lot of them can.&lt;/p&gt;

&lt;p&gt;I will attempt to follow up with more details in future posts&amp;hellip;look for Part III coming soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless part I</title>
      <link>http://blog.brianz.bz/post/serverless-part-i/</link>
      <pubDate>Wed, 20 Apr 2016 16:08:07 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-i/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s a pretty exciting (and challenging) time to build software-based applications. Every week
there are more and more tools to make our jobs easier or to enable us to focus on &lt;em&gt;application&lt;/em&gt;
development rather than dealing with the infrastructure around those applications. Of course, this
makes our jobs challenging since we need to keep up with the innovation.&lt;/p&gt;

&lt;p&gt;This will be part one of a multi-part series about &amp;ldquo;serverless&amp;rdquo; architecture/design. I hesitate to
call this &amp;ldquo;architecture&amp;rdquo; but it&amp;rsquo;s definitely a way of doing things both from an infrastructure (or
lack of) side and code organization. The possibility of running web applications without any servers
has become a reality fairly recently and kicked off multiple projects around this idea.
What I&amp;rsquo;d like to do in Part I is to simply give an intro to &amp;ldquo;serverless&amp;rdquo; and talk through some moving parts.&lt;/p&gt;

&lt;p&gt;The big question, what is serverless?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Serverless is a way to author a HTTP service using &lt;a href=&#34;https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&#34; target=&#34;_blank&#34;&gt;AWS API
Gateway&lt;/a&gt; and
&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34; target=&#34;_blank&#34;&gt;AWS Lambda&lt;/a&gt; which
eliminates the need to manage or maintain any running servers or EC2 instances. Any servers used to
process HTTP requests are managed by AWS and never exposed to you as the application developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a point of clarification, there is a project named Serverless. I&amp;rsquo;ll try to differentiate the
&lt;em&gt;term&lt;/em&gt; &amp;ldquo;serverless&amp;rdquo; from the &lt;em&gt;project&lt;/em&gt; Serverless by capitalizing the project.&lt;/p&gt;

&lt;h2 id=&#34;api-gateway:16049c44302f91a3835f9f8afd5f9708&#34;&gt;API Gateway&lt;/h2&gt;

&lt;p&gt;In July of 2015 &lt;a href=&#34;https://aws.amazon.com/blogs/aws/amazon-api-gateway-build-and-run-scalable-application-backends/&#34; target=&#34;_blank&#34;&gt;AWS released API
Gateway&lt;/a&gt;
which is a service to create and manage public API
endpoints on your behalf. Gateway is comprised of two services really:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;control service to expose a REST endpoint&lt;/li&gt;
&lt;li&gt;execution service to run some code or backend system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s much more to it of course so I encourage you to &lt;a href=&#34;http://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html&#34; target=&#34;_blank&#34;&gt;read the docs from
AWS&lt;/a&gt;. For the purpose of
this post we don&amp;rsquo;t need to go into a &lt;em&gt;ton&lt;/em&gt; of detail around API Gateway&amp;hellip;just imagine that you can
click a few buttons (or make some AWS API calls) and wind up with a URL that you can immediately start
hitting with &lt;code&gt;curl&lt;/code&gt; without setting up or managing EC2 instances. This is the first step in the
world of &amp;ldquo;serverless&amp;rdquo;&amp;hellip;getting a pubic HTTP endpoint without managing any servers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Without&lt;/em&gt; API Gateway standing up a webserver which does something as simple as returning and empty
response in response to a query to a public URL is quite an endeavor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spin up a cloud server&lt;/li&gt;
&lt;li&gt;install a webserver like nginx&lt;/li&gt;
&lt;li&gt;(optionally) pointing DNS at your cloud server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you&amp;rsquo;re skilled at this, it&amp;rsquo;s going to take several minutes. With API Gateway you can
literally accomplish the same thing in 30 seconds. Not only that, you&amp;rsquo;ll be paying every minute
that your EC2 instance is running, regardless of the load. With API Gateway you pay per call.&lt;/p&gt;

&lt;h2 id=&#34;lambda:16049c44302f91a3835f9f8afd5f9708&#34;&gt;Lambda&lt;/h2&gt;

&lt;p&gt;So what is Lambda? &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34; target=&#34;_blank&#34;&gt;From Amazon&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;AWS Lambda is a compute service where you can upload your code to AWS Lambda and the service can
run the code on your behalf using AWS infrastructure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does that mean &lt;em&gt;exactly&lt;/em&gt;?  Well, with Lambda you can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;author code in Java, Python or JavaScript/Node&lt;/li&gt;
&lt;li&gt;package your code in a zip file&lt;/li&gt;
&lt;li&gt;upload it to the Lambda service&lt;/li&gt;
&lt;li&gt;tell amazon to run your code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What exactly can your code actually &lt;em&gt;do&lt;/em&gt; though?  Again, this is mostly up to you. While there are
some constraints you need to abide by (mostly around execution time and memory) you can do almost
anything. Provided your code has access to any supporting libraries it needs, AWS will take care of
the runtime. Your code is executed based on some trigger and once it&amp;rsquo;s done, poof! There are no
running servers (which you need to manage) which allows you to focus on your code.&lt;/p&gt;

&lt;p&gt;When it&amp;rsquo;s being executed, AWS will magically unpack your code, run it and then be done with it until the next time
it&amp;rsquo;s run. There are several beautiful things about this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No servers to maintain&lt;/li&gt;
&lt;li&gt;Pay by execution time&amp;hellip;no wasted cycles&lt;/li&gt;
&lt;li&gt;Ability to execute a Lambda from various triggers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;api-gateway-lambda-serverless:16049c44302f91a3835f9f8afd5f9708&#34;&gt;API Gateway + Lambda == Serverless&lt;/h2&gt;

&lt;p&gt;The confluence of API Gateway and Lambda is what serverless is all about. Above I described how
easy it is to build a public URL which doesn&amp;rsquo;t do anything. That&amp;rsquo;s not interesting at all, but
becomes interesting when you can have that API call trigger a Lambda function. Gateway actually
supports different execution services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP proxy&lt;/li&gt;
&lt;li&gt;Mock integration&lt;/li&gt;
&lt;li&gt;AWS Service Proxy&lt;/li&gt;
&lt;li&gt;Lambda function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m not going to talk about the first three&amp;hellip;we&amp;rsquo;re really interested in having API Gateway execute
a Lambda function on our behalf.  This is the foundation of serverless&amp;hellip;.API Gateway calls your custom
Lambda function.  Your Lambda function can do whatever you can come up with and provide a response
which is returned to the caller of your HTTP endpoint.  Your Lambda function could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetch data from a database&lt;/li&gt;
&lt;li&gt;write data to a database&lt;/li&gt;
&lt;li&gt;kick off some processes with Kinesis&lt;/li&gt;
&lt;li&gt;anything you manage to accomplish with Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The power of this may or may not have hit you, but here it is: if you can write all of your application code as Lambda
functions you have now created a &lt;strong&gt;completely serverless REST API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s drill in on this. Imagine making a HTTP call, getting a response
and not having to manage a single EC2 instance (or any other type of server). Furthermore, that
single call cost a fraction of a penny. If you look at the &lt;a href=&#34;https://aws.amazon.com/lambda/pricing/&#34; target=&#34;_blank&#34;&gt;pricing for
Lambda&lt;/a&gt; and &lt;a href=&#34;https://aws.amazon.com/api-gateway/pricing/&#34; target=&#34;_blank&#34;&gt;pricing for
Gateway&lt;/a&gt; you&amp;rsquo;ll get a feel for how cheap this can be.&lt;/p&gt;

&lt;h2 id=&#34;serverless-project:16049c44302f91a3835f9f8afd5f9708&#34;&gt;Serverless project&lt;/h2&gt;

&lt;p&gt;One of my big questions was how this fits into the normal development cycle. Sure, this is
&lt;strong&gt;super&lt;/strong&gt; powerful, but how do I actually &lt;em&gt;use&lt;/em&gt; it in the real world. Other folks are realizing the
power of these systems and as usual, tooling is being built up around the AWS services.&lt;/p&gt;

&lt;p&gt;One of the more popular projects and one which I was referred to by the AWS folks is
&lt;a href=&#34;http://serverless.com&#34; target=&#34;_blank&#34;&gt;http://serverless.com&lt;/a&gt;. There area
others&amp;hellip;here&amp;rsquo;s one to run &lt;a href=&#34;https://github.com/Miserlou/django-zappa&#34; target=&#34;_blank&#34;&gt;Django via Gateway/Lambda&lt;/a&gt;
and yet another one &lt;a href=&#34;https://github.com/Miserlou/flask-zappa&#34; target=&#34;_blank&#34;&gt;doing the same thing with Flask&lt;/a&gt;. I&amp;rsquo;m
sure there are other&amp;hellip;Google &lt;code&gt;&amp;quot;serverless fill-in-the-blank&amp;quot;&lt;/code&gt; and you&amp;rsquo;ll undoubtedly find something
interesting.&lt;/p&gt;

&lt;p&gt;In my initial testing the Serverless project is pretty nice. Since its main job is to wrap API
calls to API Gateway and Lambda you&amp;rsquo;ll need to understand those two services on your own before you
can start building things with Serverless. In my experience that&amp;rsquo;s pretty much always the case with
any tool that wraps AWS services.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the high level introduction to what serverless is all about. In Part II I&amp;rsquo;ll do a walk
through of the Serverless project and show some real-world examples of how to build something. Stay
tuned!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>