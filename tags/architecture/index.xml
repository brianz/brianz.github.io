<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Brian Z</title>
    <link>http://blog.brianz.bz/tags/architecture/</link>
    <description>Recent content in Architecture on Brian Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017. All rights reserved.</copyright>
    <lastBuildDate>Thu, 16 Feb 2017 21:21:10 -0700</lastBuildDate>
    
	<atom:link href="http://blog.brianz.bz/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to setup a free SSL certificate for use with Serverless APIs</title>
      <link>http://blog.brianz.bz/post/custom-https-domains-with-serverless/</link>
      <pubDate>Thu, 16 Feb 2017 21:21:10 -0700</pubDate>
      
      <guid>http://blog.brianz.bz/post/custom-https-domains-with-serverless/</guid>
      <description>If you&amp;rsquo;re reading this blog it will become very obvious I&amp;rsquo;m a big fan of the Serverless framework to power AWS Lambda and API Gateway integration.
When building real APIs that you&amp;rsquo;d like to deploy publicly one thing you&amp;rsquo;ll run into eventually is that of setting up a custom domain name. API Gateway is fantastic and you can get up and running in a hurry, exposing a publicly facing API running over SSL.</description>
    </item>
    
    <item>
      <title>Serverless 1.x</title>
      <link>http://blog.brianz.bz/post/serverless-1.0/</link>
      <pubDate>Wed, 21 Dec 2016 12:04:30 -0700</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-1.0/</guid>
      <description>Since my last posts on Serverless, Serverless has gone 1.0. In fact, as of this writing Serverless is at version 1.3. I&amp;rsquo;ve had the luck of taking 1.3 for a spin with my new job by implementing an application for the Amazon Alexa platform. Alexa has a really nice integration with Lambda and we&amp;rsquo;ve been using Serverless to do our Lambda development. Our development pace has been insanely high and much of that can be attributed to Serverless.</description>
    </item>
    
    <item>
      <title>Demo service with Servant</title>
      <link>http://blog.brianz.bz/post/demo-service-with-servant/</link>
      <pubDate>Thu, 15 Sep 2016 17:41:39 -0400</pubDate>
      
      <guid>http://blog.brianz.bz/post/demo-service-with-servant/</guid>
      <description>In a previous post I introduced and discussed about an open source library I authored called Servant. Servant is a framework for building RPC-style services with Python. Servant is to services as Django or Rails is to web applications&amp;hellip;it&amp;rsquo;s framework you&amp;rsquo;d use when you need to build a service in Python.
I&amp;rsquo;ll go a bit deeper in this post and show what it&amp;rsquo;s like to actually author and use a service.</description>
    </item>
    
    <item>
      <title>Serverless part IV</title>
      <link>http://blog.brianz.bz/post/serverless-part-iv/</link>
      <pubDate>Fri, 01 Jul 2016 11:55:51 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-iv/</guid>
      <description>Welcome to part four in my series about Serverless. As a reminder, there are now three other parts you can read if you aren&amp;rsquo;t coming here from those posts already:
 Serverless Part I Serverless Part II Serverless Part III  In the previous posts I worked through some of the basics of Serverless and stood up an API endpoint which returned HTML. Now I&amp;rsquo;d like to start working through some more real-world examples and talk through some warts I&amp;rsquo;ve found with Serverless.</description>
    </item>
    
    <item>
      <title>Serverless part III</title>
      <link>http://blog.brianz.bz/post/serverless-part-iii/</link>
      <pubDate>Thu, 02 Jun 2016 17:01:36 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-iii/</guid>
      <description>This is part three in my series about creating serverless systems using AWS API Gateway + Lambda via the Serverless project. If you&amp;rsquo;re haven&amp;rsquo;t already you can read part I and part II.
My goal is to continue evolving this example to walk through a non-trivial example of doing something with the serverless architecture. Along the way I&amp;rsquo;ll demo some useful features which you&amp;rsquo;ll undoubtedly run into when doing real development with Serverless.</description>
    </item>
    
    <item>
      <title>Serverless part II</title>
      <link>http://blog.brianz.bz/post/serverless-part-ii/</link>
      <pubDate>Mon, 02 May 2016 22:08:40 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-ii/</guid>
      <description>Following up from my last post about serverless systems, let&amp;rsquo;s do a walk-through of the Serverless project.
Getting started As usual I&amp;rsquo;ll demo this using a Docker container. You can check out the code on Github and follow along: https://github.com/brianz/serverless-demo.
This Docker image has Serverless v0.5.5&amp;hellip;and that&amp;rsquo;s about it. I use a basic Makefile to build and run the container. You can take a look at it yourself and change the container name if you&amp;rsquo;d like to follow along.</description>
    </item>
    
    <item>
      <title>Serverless part I</title>
      <link>http://blog.brianz.bz/post/serverless-part-i/</link>
      <pubDate>Wed, 20 Apr 2016 16:08:07 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-part-i/</guid>
      <description>It&amp;rsquo;s a pretty exciting (and challenging) time to build software-based applications. Every week there are more and more tools to make our jobs easier or to enable us to focus on application development rather than dealing with the infrastructure around those applications. Of course, this makes our jobs challenging since we need to keep up with the innovation.
This will be part one of a multi-part series about &amp;ldquo;serverless&amp;rdquo; architecture/design.</description>
    </item>
    
    <item>
      <title>Introducing servant</title>
      <link>http://blog.brianz.bz/post/introducing-servant/</link>
      <pubDate>Mon, 04 Apr 2016 17:26:23 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/introducing-servant/</guid>
      <description>Late in 2014 we began the process of discussing a payment system at work. The system was to have a fairly simple reason for existing&amp;hellip;to do all the work needed to charge credit cards on behalf of our customers.
Backing up a bit&amp;hellip;our system is mainly a B2B application. Home care agencies all over the country run our SAAS application which helps them to run their businesses. Our new Payment System was aimed at allowing our customers to charge their customers&amp;rsquo; credit cards directly, meaning our customers don&amp;rsquo;t need to wait for checks or paper invoicing.</description>
    </item>
    
  </channel>
</rss>