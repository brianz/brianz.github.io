<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Brian Z</title>
    <link>http://blog.brianz.bz/tags/python/</link>
    <description>Recent content in Python on Brian Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016-2017. All rights reserved.</copyright>
    <lastBuildDate>Fri, 28 Sep 2018 21:38:00 -0600</lastBuildDate>
    
	<atom:link href="http://blog.brianz.bz/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing Database Transactions with SQLAlchemy in Serverless</title>
      <link>http://blog.brianz.bz/post/serverless-how-to-handle-db-transactions/</link>
      <pubDate>Fri, 28 Sep 2018 21:38:00 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/serverless-how-to-handle-db-transactions/</guid>
      <description>For quite some time, SQLAlchemy has been my go-to database toolkit and ORM for Python microservices and Serverless projects. SQLAlchemy is very powerful and has given me the ability to do pretty much anything I need to do with Postgres, my database of choice nowadays. Of course, the trade off of great power and flexibility is increased complexity. Since SQLAlchemy is a bit more low-level than other ORMs (such as Django, or even Flask&amp;rsquo;s layer on top of SQLAlchemy) you&amp;rsquo;re on the hook for dealing with some details that these other ORMs handle automatically.</description>
    </item>
    
    <item>
      <title>Structuring Serverless Applications with Python</title>
      <link>http://blog.brianz.bz/post/structuring-serverless-applications-with-python/</link>
      <pubDate>Fri, 21 Jul 2017 23:09:49 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/structuring-serverless-applications-with-python/</guid>
      <description>In spite of my intentions to get more involved in Elixir I&amp;rsquo;ve been stuck in the Python tractor beam.
For all of the issues that may arise in large Python web applications, Python really is a fantastic do-it-all language. As one of my colleagues recently said:
 Python is the second best language for everything.
 I&amp;rsquo;m still a very big fan of the Serverless framework and have been using it almost constantly at work.</description>
    </item>
    
    <item>
      <title>Elixir for Pythonistas part I</title>
      <link>http://blog.brianz.bz/post/elixir-for-pythonistas-i/</link>
      <pubDate>Fri, 07 Apr 2017 16:02:32 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/elixir-for-pythonistas-i/</guid>
      <description>For the past many many years my goto language has been Python. I&amp;rsquo;ve written all sorts of applications using Python:
 Django web apps Client side GUI applications with PyQt Data science stuff with numpy, pandas, etc. Alexa applications Serverless systems and web APIs Microservices and a microservice library Many backend services to power various SAAS and non-SAAS applications  Whenever there is some type of problem I need to solve programatically, I reach for Python.</description>
    </item>
    
    <item>
      <title>Authoring Alexa Skills with Python and Lazysusan</title>
      <link>http://blog.brianz.bz/post/alexa-with-lazysusan/</link>
      <pubDate>Tue, 24 Jan 2017 13:05:21 -0700</pubDate>
      
      <guid>http://blog.brianz.bz/post/alexa-with-lazysusan/</guid>
      <description>Most recently at my day job we were tasked with building an Amazon Alexa app for a client. As soon as I heard rumors that we would be doing an Alexa app I starting raising my hand hoping that I&amp;rsquo;d get put on this project. If you read these blog posts it should become quite apparent I&amp;rsquo;m a pretty big AWS fanboy and Alexa has pretty tight integration with AWS Lambda</description>
    </item>
    
    <item>
      <title>Demo service with Servant</title>
      <link>http://blog.brianz.bz/post/demo-service-with-servant/</link>
      <pubDate>Thu, 15 Sep 2016 17:41:39 -0400</pubDate>
      
      <guid>http://blog.brianz.bz/post/demo-service-with-servant/</guid>
      <description>In a previous post I introduced and discussed about an open source library I authored called Servant. Servant is a framework for building RPC-style services with Python. Servant is to services as Django or Rails is to web applications&amp;hellip;it&amp;rsquo;s framework you&amp;rsquo;d use when you need to build a service in Python.
I&amp;rsquo;ll go a bit deeper in this post and show what it&amp;rsquo;s like to actually author and use a service.</description>
    </item>
    
    <item>
      <title>Introducing servant</title>
      <link>http://blog.brianz.bz/post/introducing-servant/</link>
      <pubDate>Mon, 04 Apr 2016 17:26:23 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/introducing-servant/</guid>
      <description>Late in 2014 we began the process of discussing a payment system at work. The system was to have a fairly simple reason for existing&amp;hellip;to do all the work needed to charge credit cards on behalf of our customers.
Backing up a bit&amp;hellip;our system is mainly a B2B application. Home care agencies all over the country run our SAAS application which helps them to run their businesses. Our new Payment System was aimed at allowing our customers to charge their customers&amp;rsquo; credit cards directly, meaning our customers don&amp;rsquo;t need to wait for checks or paper invoicing.</description>
    </item>
    
  </channel>
</rss>