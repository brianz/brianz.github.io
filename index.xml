<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brian Z</title>
    <link>http://blog.brianz.bz/</link>
    <description>Recent content on Brian Z</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2016. All rights reserved.</copyright>
    <lastBuildDate>Wed, 13 Apr 2016 07:24:44 -0600</lastBuildDate>
    <atom:link href="http://blog.brianz.bz/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>If you&#39;re not using Docker you should be</title>
      <link>http://blog.brianz.bz/post/if-youre-not-using-docker-you-should-be/</link>
      <pubDate>Wed, 13 Apr 2016 07:24:44 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/if-youre-not-using-docker-you-should-be/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re a developer and don&amp;rsquo;t live under a rock you&amp;rsquo;ve undoubtedly heard of
&lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;.  There are &lt;em&gt;many many&lt;/em&gt; sites out there which will tell you about
how to use Docker and how to start using it&amp;hellip;this will not be one of those posts. Rather, I&amp;rsquo;d like
to write about some practical advantages about Docker which I&amp;rsquo;ve learned that weren&amp;rsquo;t super obvious
when getting started.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll start off by reiterating, &lt;strong&gt;if you&amp;rsquo;re not using Docker you should be&lt;/strong&gt;.  It really is quite an
amazing tool.  No software tool is perfect and Docker is no different.  Still, new the problems you
find from going the Docker route are shadowed by the problems it solves. Here are a few ways that
Docker can help you which you may not realize or have thought about.&lt;/p&gt;

&lt;h2 id=&#34;throw-away-work:0d4479024504bf6891234dff2c30a8b8&#34;&gt;Throw away work&lt;/h2&gt;

&lt;p&gt;As a heavy user of Python I was very accustomed to using &lt;code&gt;virtualenv&lt;/code&gt; and &lt;code&gt;virtualenvwrapper&lt;/code&gt; to
test things out.  Want to test out Kafka or Sphinx or whatever?  No problem, create a new
&lt;code&gt;virtualenv&lt;/code&gt;, install all of your requirements and voila&amp;hellip;when you&amp;rsquo;re done simply &lt;code&gt;rmvirtualenv
mytest&lt;/code&gt; and you&amp;rsquo;re done.&lt;/p&gt;

&lt;p&gt;With Docker, the need for &lt;code&gt;virtualenv&lt;/code&gt; pretty much goes always (although, I&amp;rsquo;m not getting rid of it
anytime soon).  Since containers are so cheap it&amp;rsquo;s trivial to build you&amp;rsquo;re own Docker image and
install all of the packages you need.  Here&amp;rsquo;s a two-line &lt;code&gt;Dockerfile&lt;/code&gt; which will work and can be
used to build documentation using the popular (Sphinx)[&lt;a href=&#34;http://sphinx.pocoo.org&#34;&gt;http://sphinx.pocoo.org&lt;/a&gt;] library&amp;hellip;I&amp;rsquo;ll
install some extension just for fun:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Dockerfile
FROM python:2.7

RUN pip install sphinx sphinxcontrib-argdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s build it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t bz/sphinx .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now you have a little Docker image named &lt;code&gt;bz/sphinx&lt;/code&gt; which you can use to build Sphinx documentation. Doing that
may not be as obvious as you&amp;rsquo;d think. If you create a container and write/build your docs,
everything will disappear once the container is killed. The trick is to mount a local folder on
your host system as a volume in the Docker container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@bz-cconline$ docker run --rm -it -v `pwd`:/code  bz/sphinx  bash
root@675a26dba565:/# cd /code/
root@675a26dba565:/code# sphinx-quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After stepping through the &lt;code&gt;sphinx-quickstart&lt;/code&gt; I&amp;rsquo;m done and can now edit my files on my host system
and build the docs using Sphinx on the Docker container. Even when the Docker container is nuked,
provided I use the volume (using &lt;code&gt;-v $(pwd):/code&lt;/code&gt;) the files on your host are visible from within
your container.&lt;/p&gt;

&lt;p&gt;This makes is really really easy to use Docker as a sort of &lt;strong&gt;package manager&lt;/strong&gt; for &lt;em&gt;any&lt;/em&gt; system,
language or ecosystem. I&amp;rsquo;ve used it for Node, Java and Python to name a few&amp;hellip;it&amp;rsquo;s awesome.&lt;/p&gt;

&lt;h2 id=&#34;testing-a-somewhat-complex-system:0d4479024504bf6891234dff2c30a8b8&#34;&gt;Testing a somewhat complex system&lt;/h2&gt;

&lt;p&gt;A while ago I wanted to play around with Wordpress a bit. I have no idea how to set up Wordpress or
what the requirements are other than something with PHP&amp;hellip;definitely not my world. Of course, I
reached for Docker and docker-compose.  Sure enough, there is an official image which is even so
kind as to give you a demo &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/_/wordpress/&#34;&gt;https://hub.docker.com/_/wordpress/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use the example &lt;code&gt;docker-compose.yml&lt;/code&gt; all you really need to do is hit the IP address of your
host running the Docker daemon and voil√†&amp;hellip;Wordpress. Just like above, I classify this as
throw-away work because I was just playing around and figuring out how to manipulate Wordpress.
But, the ease and speed at which Docker allows you to spin up a system comprised of multiple
components (a PHP/Apache server and MySQL db in this case) is incredible. Wordpress isn&amp;rsquo;t even that
complicated, but there are many &lt;code&gt;docker-compose.yml&lt;/code&gt; references out there for much more complex
systems allow you to either do zero work or make some light tweaks to get things to suit your
needs.&lt;/p&gt;

&lt;h2 id=&#34;helper-scripts:0d4479024504bf6891234dff2c30a8b8&#34;&gt;Helper scripts&lt;/h2&gt;

&lt;p&gt;There is a small theme here&amp;hellip;since containers are well, self-contained, you can use them as
package managers in some sense.  This is sort of a contrived example but imagine you want to use
the &lt;code&gt;opencv&lt;/code&gt; library to run some image analysis. In the past you&amp;rsquo;d probably spend 8 hours trying to
figure out how to install it on your Mac or even on a Linux machine. Google around a bit and
chances are someone has already created an image&amp;hellip;yup..here we go!
&lt;a href=&#34;https://hub.docker.com/r/kavolorn/opencv/~/dockerfile/&#34;&gt;https://hub.docker.com/r/kavolorn/opencv/~/dockerfile/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can use this image as a &lt;em&gt;utility&lt;/em&gt; rather than as a running system. Since containers spin up
and down so quickly there is no reason why we can&amp;rsquo;t consider them executables for &lt;em&gt;any&lt;/em&gt; command.
Just to make sure I wasn&amp;rsquo;t lying I went ahead and did this&amp;hellip;it took a &lt;em&gt;little&lt;/em&gt; tweaking but not
much.  I was able to successfully:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a Docker image based on the image above&lt;/li&gt;
&lt;li&gt;Install some extra requirements&lt;/li&gt;
&lt;li&gt;Create a color histogram from a &lt;a href=&#34;http://blog.brianz.bz/images/house.jpg&#34;&gt;random image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Dockerfile
FROM kavolorn/opencv

RUN apt-get update
RUN apt-get install -y curl
RUN curl -O https://bootstrap.pypa.io/get-pip.py
RUN python3 get-pip.py
RUN apt-get install -y libfreetype6-dev
RUN python3 -m pip install matplotlib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the Python3 file to create the histogram&amp;hellip;mostly &lt;a href=&#34;http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_histograms/py_histogram_begins/py_histogram_begins.html&#34;&gt;copied from
here&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# histo.py
import cv2
import numpy as np
from matplotlib import pyplot as plt

img = cv2.imread(&#39;house.jpg&#39;, 0)

# create a mask
mask = np.zeros(img.shape[:2], np.uint8)
mask[100:300, 100:400] = 255
masked_img = cv2.bitwise_and(img,img,mask = mask)

# Calculate histogram with mask and without mask
# Check third argument for mask
hist_full = cv2.calcHist([img],[0],None,[256],[0,256])
hist_mask = cv2.calcHist([img],[0],mask,[256],[0,256])

plt.subplot(221)
plt.imshow(img, &#39;gray&#39;)

plt.subplot(222)
plt.imshow(mask,&#39;gray&#39;)

plt.subplot(223)
plt.imshow(masked_img, &#39;gray&#39;)

plt.subplot(224)
plt.plot(hist_full)
plt.plot(hist_mask)

plt.xlim([0,256])

plt.savefig(&#39;histogram.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here is how I ran it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# build the image
&amp;gt; docker build -t bz/opencv .
# run the image
&amp;gt; docker run --rm -it -v $(pwd):/code bz/opencv bash
root@f278f7a7124e:/# 
root@f278f7a7124e:/# cd /code
root@f278f7a7124e:/code# python histo.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with that, I get an image on my &lt;em&gt;local&lt;/em&gt; system which I can open:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.brianz.bz/images/histogram.png&#34; alt=&#34;color-histogram&#34; /&gt;&lt;/p&gt;

&lt;p&gt;From here it&amp;rsquo;d be pretty easy to add an &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; so that we could tell a container to
run this script on startup and point it to any random image.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On technical blogging</title>
      <link>http://blog.brianz.bz/post/on-technical-blogging/</link>
      <pubDate>Thu, 07 Apr 2016 18:41:18 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/on-technical-blogging/</guid>
      <description>&lt;p&gt;As I mentioned in my &lt;a href=&#34;http://blog.brianz.bz/post/getting-started-with-hugo/&#34;&gt;inaugural post&lt;/a&gt;, I had been wanting to start a technical blog for some time.
Mainly a a way of capturing things I learn or discover so that it can benefit others. As an
engineer I consume a &lt;em&gt;lot&lt;/em&gt; of content on the web. Let&amp;rsquo;s face it, when we hit some technical hurdle
or are trying to figure something out that we haven&amp;rsquo;t seen before, our job become that of an
internet sleuth, combing the web for answers on StackOverflow, blogs, etc.&lt;/p&gt;

&lt;p&gt;By nature I&amp;rsquo;m not much of a self promoter and in some ways, I&amp;rsquo;ve tended to view blogs and &amp;ldquo;personal
brands&amp;rdquo; as shameless self-promotion (nothing personal &lt;a href=&#34;http://simpleprogrammer.com&#34;&gt;John Sonmez&lt;/a&gt; or
other bloggers).
One day I listened to &lt;a href=&#34;http://simpleprogrammer.com&#34;&gt;John&lt;/a&gt; on the &lt;a href=&#34;http://www.se-radio.net/2015/12/se-radio-episode-245-john-sonmez-on-marketing-yourself-and-managing-your-career/&#34;&gt;Software Engineering
Radio Podcast&lt;/a&gt;
where his topic was that of soft skills. I&amp;rsquo;m old enough to realize that the smartest engineers
are not necessarily the most successful. Being a good engineer is &lt;strong&gt;really&lt;/strong&gt; important&amp;hellip;but it&amp;rsquo;s
good to have some personal skills rather than being the Doritos-eating-mt-dew-drinking person who
lives in a hovel and cranks out code. The soft skills are the ones which can really propel your
career and work forward taking it from great or good to amazing. Soft skills were the topic of
discussion in this podcast interview with John and it really resonated with me&amp;hellip;with that I got
over my unfair view of being a self-promoter and whipped this up.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve jumped in head first and signed up for John&amp;rsquo;s 7-part course on boosting your career. Now, I
can&amp;rsquo;t say one way or another how or &lt;em&gt;if&lt;/em&gt; this will help your career trajectory, but it&amp;rsquo;s really
helped to motivate me to get this blog up and running and to attempt to be a bit more visible in
the &amp;ldquo;public&amp;rdquo; eye. I highly recommend it:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://devcareerboost.com/blog-course/&#34;&gt;http://devcareerboost.com/blog-course/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a real example, I authored and open sourced the &lt;a href=&#34;https://github.com/clearcare/servant&#34;&gt;servant
library&lt;/a&gt; over a year ago. We&amp;rsquo;ve been running in production at
work for &lt;em&gt;over a year&lt;/em&gt;&amp;hellip;but it hasn&amp;rsquo;t been publicized outside of my small team. Just blogging
about it and creating some links could help somewhere out there who&amp;rsquo;s interested in authoring a
microservice with Python. And, even if that doesn&amp;rsquo;t happen, it&amp;rsquo;s been fun to talk about what I work
on and show something that I&amp;rsquo;m proud of, even if the audience is small.&lt;/p&gt;

&lt;p&gt;John&amp;rsquo;s email campaign is pretty light and gives you some practical assignments to get your blog up and
running. I can definitely say that I wouldn&amp;rsquo;t be writing this now had I not enrolled&amp;hellip;so with
that, I tip my hat to &lt;a href=&#34;http://simpleprogrammer.com&#34;&gt;John&lt;/a&gt; and say thank you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/l2JJHgjz1uaEncXew/giphy.gif&#34; title=&#34;Thank you sir&#34; &gt;&lt;/img&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing servant</title>
      <link>http://blog.brianz.bz/post/introducting-servant/</link>
      <pubDate>Mon, 04 Apr 2016 17:26:23 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/introducting-servant/</guid>
      <description>

&lt;p&gt;Late in 2014 we began the process of discussing a payment system at
&lt;a href=&#34;http://www.clearcareonline.com&#34;&gt;work&lt;/a&gt;. The system was to have a fairly simple reason for
existing&amp;hellip;to do all the work needed to charge credit cards on behalf of our customers.&lt;/p&gt;

&lt;p&gt;Backing up a bit&amp;hellip;our system is mainly a B2B application. Home care agencies all over the country
run our SAAS application which helps them to run their businesses. Our new Payment System was aimed at allowing
our customers to charge &lt;em&gt;their&lt;/em&gt; customers&amp;rsquo; credit cards directly, meaning our customers don&amp;rsquo;t need
to wait for checks or paper invoicing. Our SAAS is a pretty typical Python stack with the &lt;strong&gt;major&lt;/strong&gt;
components being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;monolithic Django app&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;Elasticsearch&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Celery/RabbitMQ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For us it was pretty clear that we wanted to build this as a stand-alone service and stick with
Python. Yeah&amp;hellip;we wanted a &lt;em&gt;microservice&lt;/em&gt; which is all the rage now. We knew that we needed to
start evolving our architecture and services, while having their own sets of challenges, make a lot
of sense. In late 2014 the issue was that there really wasn&amp;rsquo;t (and still aren&amp;rsquo;t) many existing and
proven frameworks for building services in Python.&lt;/p&gt;

&lt;h2 id=&#34;enter-servant:9879b9e4b526681137999e709cb09eff&#34;&gt;Enter servant&lt;/h2&gt;

&lt;p&gt;Leaning on a custom service framework I had worked with while at
&lt;a href=&#34;http://eventbrite.com&#34;&gt;Eventbrite&lt;/a&gt; I came up with servant. You can see the project page on Github.
We currently have multiple services deployed in production at Clearcare based on servant and so
far, they&amp;rsquo;ve been working great:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/clearcare/servant&#34;&gt;https://github.com/clearcare/servant&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What exactly is this library? At a very high level servant is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a Python library/framework for authoring and communicating with services&lt;/li&gt;
&lt;li&gt;to services what Django/Flask/Rails are to web applications&lt;/li&gt;
&lt;li&gt;designed primarily for &lt;em&gt;internal&lt;/em&gt; non-publicly facing services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Servant is actually pretty simple and doesn&amp;rsquo;t perform much magic.  What it does do
is give you, the service author, a framework for designing RPC-style services in Python which
can run on their own, independently, and are easy to connect to and interface with. In addition,
it&amp;rsquo;s not an opinionated framework so you can choose whatever tooling you&amp;rsquo;d like in order to author
your service. Our typical recipe at work includes pytest for testing and sqlalchemy for talking to
the Postgres. However, you use whatever you want depending on your needs&amp;hellip;servant stays out of
your way and deals with executing service calls on behalf of the client. There is some validation
here and there to ensure the service call is well-formed but I won&amp;rsquo;t go over that right now.&lt;/p&gt;

&lt;h2 id=&#34;quick-code-examples:9879b9e4b526681137999e709cb09eff&#34;&gt;Quick code examples&lt;/h2&gt;

&lt;p&gt;When I first started using services I had no idea what looked like both authoring a service or
talking to a service. If you have never worked with a service framework you may think it&amp;rsquo;s a matter
of writing or talking to a REST endpoint. Servant is a bit different&amp;hellip;so here are a few small code
snippets which should make things more clear.&lt;/p&gt;

&lt;p&gt;In this example, we&amp;rsquo;ll create a silly little &amp;ldquo;Calculator Service&amp;rdquo;. I&amp;rsquo;ll implement an &lt;code&gt;add&lt;/code&gt; endpoint
which will take two numbers, add them up and return the sum.&lt;/p&gt;

&lt;h3 id=&#34;client:9879b9e4b526681137999e709cb09eff&#34;&gt;Client&lt;/h3&gt;

&lt;p&gt;As a client, the only dependencies is having the servant library installed. You could call this
from a Django app, one-off script&amp;hellip;wherever. Install servant from github. Here I install it into a
virtualenv using virtualenvwrapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brianz@gold$ mkvirtualenv test_servant

(test_servant)brianz@gold$ pip install git+https://github.com/clearcare/servant.git@master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, I can write some client code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# test_add.py
import servant.client

client = servant.client.Client(&#39;calculator_service&#39;, version=1)

# add is the actual endpoint we&#39;re calling
response = client.add(number1=10, number2=15)

if response.is_error():
    print response.errors, response.field_errors
else:
    print response.result
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s about it for client code! Provided you have a service named &lt;code&gt;calculator_service&lt;/code&gt; available,
this code will work and spit out the expected result of &lt;code&gt;25&lt;/code&gt;. You can actually install
&lt;code&gt;calculator_service&lt;/code&gt; yourself and run this code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test_servant)brianz@gold$ cd servant/examples/calculator_service/
(test_servant)brianz@gold$ pip install .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(test_servant)brianz@bz-cconline$ python test_calculator.py 
25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s how you actually &lt;em&gt;use&lt;/em&gt; a servant service. How do you author one?&lt;/p&gt;

&lt;h3 id=&#34;server:9879b9e4b526681137999e709cb09eff&#34;&gt;Server&lt;/h3&gt;

&lt;p&gt;Authoring a service is a bit more work but still quite easy. This is how you&amp;rsquo;d implement the &lt;code&gt;add&lt;/code&gt;
method we used above. Note you can also &lt;a href=&#34;https://github.com/clearcare/servant/tree/master/examples/calculator_service&#34;&gt;peruse the
&lt;code&gt;calculator_service&lt;/code&gt;&lt;/a&gt;
to see a more thorough implemenation..but the below code will actually work.&lt;/p&gt;

&lt;p&gt;First, you need to define a single &lt;code&gt;service.py&lt;/code&gt; file which defines your service and declares all
its endpoints:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# service.py
from servant.service.base import Service

import actions

class Calculator(Service):

    name = &#39;calculator_service&#39;
    version = 1 

    action_map = { 
            &#39;add&#39;: actions.AddAction,
            # we won&#39;t implement subtract now
            # &#39;subtract&#39;: actions.SubtractAction,
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, you&amp;rsquo;ll need to create one or more actions. Note above we import &lt;code&gt;actions&lt;/code&gt; and point to two
different action classes&amp;hellip;we&amp;rsquo;ll only show one here for brevity. But, how you map endpoint
names to actions is entirely up to you. We always have an &lt;code&gt;actions/&lt;/code&gt; directory with different
actions broken up by area of responsibility. Again, for brevity we&amp;rsquo;ll just show a single action for
our calculator service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# actions.py
import servant.fields
from servant.service.actions import Action

class AddAction(Action):
    number1 = servant.fields.IntField(
            required=True,
            in_response=True,
    )   
    number2 = servant.fields.IntField(
            required=True,
            in_response=True,
    )   
    result = servant.fields.IntField(
            in_response=True,
    )   

    def run(self, **kwargs):
        self.result = self.number1 + self.number2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you ignore &lt;code&gt;setup.py&lt;/code&gt; and any other packaging code or files, our actual service is only a few
files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(test_servant)brianz@gold$ tree
‚îú‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ actions.py
‚îî‚îÄ‚îÄ service.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can imagine what &lt;code&gt;SubtractAction&lt;/code&gt; would look like. From there, provided you
can install your service as a Python package, this code is fully functional. You can see all of
this and actually give it a try&amp;hellip;clone the repo and look in
the &lt;a href=&#34;https://github.com/clearcare/servant/tree/master/examples/calculator_service&#34;&gt;the examples directory&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;local-library-mode:9879b9e4b526681137999e709cb09eff&#34;&gt;Local library mode&lt;/h2&gt;

&lt;p&gt;One killer feature IMO which I have only seen in Eventbrite&amp;rsquo;s SOA library is that of local mode.
You&amp;rsquo;ll notice in all of the code above, there is no mention or reference to where the service is
running. You didn&amp;rsquo;t event start a server. Where is the client connecting? How does the client code
know where to connect? What port is the server running on?&lt;/p&gt;

&lt;p&gt;When you author a service and are able to install it as a Python package, you can talk to it just
as if it were running on a remote system. The magic here is that the servant client code imports
your service and executes it as a local library.  When you&amp;rsquo;re ready to deploy your service
somewhere else and point your clients to the &lt;em&gt;real&lt;/em&gt; server, it&amp;rsquo;s a one line change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import servant.client

client = servant.client.Client(&#39;calculator_service&#39;, version=1)
# Now point your client to the remote host
client.configure(&#39;remote-host-name-or-ip&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The big advantage to this is that it&amp;rsquo;s trivially easy to start developing and testing your service.
Unit testing is &lt;em&gt;really&lt;/em&gt; easy.  The code which gets executed is almost exactly the same. Of course,
running on a real server rather than as a local library cannot be &lt;em&gt;identical&lt;/em&gt;, but it&amp;rsquo;s quite close
and any differences are definitely worth the increase in productivity.&lt;/p&gt;

&lt;h2 id=&#34;why-servant:9879b9e4b526681137999e709cb09eff&#34;&gt;Why servant?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is dumb, REST rules!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey, we (mostly) all like REST&amp;hellip;it&amp;rsquo;s great, but has some limitations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP  by definition&lt;/li&gt;
&lt;li&gt;Requires a running server&lt;/li&gt;
&lt;li&gt;Usually end up using a wrapper library&lt;/li&gt;
&lt;li&gt;Various interpretations&lt;/li&gt;
&lt;li&gt;Can be challenging to get your Resources right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being a RPC-style library, with servant:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transport/broker can be anything (library call, HTTP, Redis, √òMQ, RabbitMQ&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Develop quickly with local library mode&lt;/li&gt;
&lt;li&gt;RPC endpoints can be more descriptive&amp;hellip;no need to interpret PUT vs POST&lt;/li&gt;
&lt;li&gt;ONE way of implementing a service vs. author&amp;rsquo;s interpretation of REST&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In terms of the transport, we currently have implementations for local mode and HTTP mode. If you
look at the
&lt;a href=&#34;https://github.com/clearcare/servant/blob/master/examples/calculator_service/README.md&#34;&gt;README&lt;/a&gt;
you&amp;rsquo;ll see example of how to run the demo via &lt;code&gt;uwsgi&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;trade-offs:9879b9e4b526681137999e709cb09eff&#34;&gt;Trade offs&lt;/h2&gt;

&lt;p&gt;As with any technology there are trade-offs. Here are a few issues with servant today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently Python only. Other languages would need a Servant library implemented.&lt;/li&gt;
&lt;li&gt;No mechanism for exploration&amp;hellip;need knowledge of service before hitting it&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t simply use curl to hit an endpoint&lt;/li&gt;
&lt;li&gt;Need another layer to expose a service publicly (i.e., hitting from JavaScript)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;closing-thoughts:9879b9e4b526681137999e709cb09eff&#34;&gt;Closing thoughts&lt;/h2&gt;

&lt;p&gt;Servant has served us quite well at work and I really would like to keep iterating on it. It&amp;rsquo;s open
source, so if you&amp;rsquo;re interested clone the repo and give it a try. I haven&amp;rsquo;t looked at the current
landscape for service libraries in Python in a while but know that others are popping up here and
there. Still, I do know that there aren&amp;rsquo;t any really big libraries that the community if flocking
to when starting their journey into a microservice architecture. From what I can tell people mostly
reach for a REST or REST-like design when building services.&lt;/p&gt;

&lt;p&gt;In a future post I&amp;rsquo;ll go into some more detail about servant and some ideas that I&amp;rsquo;ve had but
haven&amp;rsquo;t been implemented yet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Blog theme</title>
      <link>http://blog.brianz.bz/post/blog-theme/</link>
      <pubDate>Wed, 23 Mar 2016 11:02:01 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/blog-theme/</guid>
      <description>

&lt;h2 id=&#34;saas-application-architecture:6fd2790aca2c37753fb7cd100f77c2ec&#34;&gt;SAAS Application Architecture&lt;/h2&gt;

&lt;p&gt;I was finally inspired to get this site up and running after listening to a &lt;a href=&#34;http://www.se-radio.net/2015/12/se-radio-episode-245-john-sonmez-on-marketing-yourself-and-managing-your-career/&#34;&gt;Software Engineering
Radio podcast&lt;/a&gt;
with &lt;a href=&#34;http://simpleprogrammer.com/&#34;&gt;John Sonmez&lt;/a&gt;. In that podcast episode John talks about how a
technical blog can really help your career&amp;hellip;that&amp;rsquo;s never a bad thing and as mentioned in my
&lt;a href=&#34;http://blog.brianz.bz/post/getting-started-with-hugo/&#34;&gt;last post&lt;/a&gt;, I wanted a place to help others with any
tips, tricks or general things I learn.&lt;/p&gt;

&lt;p&gt;John suggests coming up with a &amp;ldquo;theme&amp;rdquo; for a tech blog&amp;hellip;a theme not in the visual sense but a
theme regarding the content. With that, I&amp;rsquo;ve landed on &amp;ldquo;SAAS Application Architecture&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;My career has taken me to a place where I primary work on software systems which have a publicly
facing website and are fairly complex behind the scenes. SAAS (software as a service) can probably
be interpreted many ways but in my mind it&amp;rsquo;s a complex software system composed of multiple
services which allows users to manage and analyze some type of data. The type of data and tasks
performed are typically within a certain domain. Taking some examples from things I&amp;rsquo;ve worked on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eventbrite: event/ticketing domain&lt;/li&gt;
&lt;li&gt;Clearcare: in-home health care agency domain&lt;/li&gt;
&lt;li&gt;RoastLog: coffee roasting domain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these systems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have publicly facing websites&lt;/li&gt;
&lt;li&gt;provide users with access to their data &lt;sup&gt;24&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;are comprised of multiple backend systems (databases, caching, microservices, etc)&lt;/li&gt;
&lt;li&gt;are non-trivial to implement due to the complexities of the domains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all of that, what I intend to write about here are my experiences building systems like this.&lt;/p&gt;

&lt;p&gt;Also, since the previous post I&amp;rsquo;ve changed themes. The new one is called
&lt;a href=&#34;http://themes.gohugo.io/blackburn/&#34;&gt;blackburn&lt;/a&gt; and is really slick. It only took a few minutes to
completely switch. You can &lt;a href=&#34;https://github.com/brianz/blog&#34;&gt;look through the git history&lt;/a&gt; for this
blog if you&amp;rsquo;re interested in what I did to make the change.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with hugo</title>
      <link>http://blog.brianz.bz/post/getting-started-with-hugo/</link>
      <pubDate>Mon, 21 Mar 2016 15:45:26 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/post/getting-started-with-hugo/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a very very long time since I&amp;rsquo;ve posted anything publicly. Blogging has drastically
changed since the early days. As most of you, I consume a &lt;em&gt;lot&lt;/em&gt; of material and resources on the
internet. For a while I&amp;rsquo;ve wanted to contribute back&amp;hellip;I&amp;rsquo;m constantly learning new things and some
of them are really useful. So, this is my way to hopefully help others.&lt;/p&gt;

&lt;p&gt;With that, my inaugural post will be on how I set up this blog. Later, I plan on mostly writing
about building microservices with Python and overall architecture patterns for microservices.&lt;/p&gt;

&lt;p&gt;I knew that I definitely wanted something static, meaning I didn&amp;rsquo;t want to stand up my own virtual
server nor did I want to sign up with any of the hosted solutions for Wordpress, Blogger, etc.
I tried out &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt; a long time ago which looked neat and had tight
integration with &lt;a href=&#34;https://pages.github.com&#34;&gt;Github Pages&lt;/a&gt;.  At some point I came across
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and played around with it. It&amp;rsquo;s quite slick and apparently has been
gaining more and more users. I went with Hugo since it&amp;rsquo;s pretty darn fast, easy-ish to set up and
it&amp;rsquo;s written in Go (I usually hate dealing with Ruby gems and dependencies).&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the TL;DR of what I did to go from zero to blogging &lt;em&gt;(this is from memory so it may not be
100% correct)&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
$ mkdir bz-blog &amp;amp;&amp;amp; cd bz-blog
$ hugo new site brianz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To find a theme I liked went to the &lt;a href=&#34;http://themes.gohugo.io&#34;&gt;Hugo themes&lt;/a&gt; site and picked
&lt;a href=&#34;http://themes.gohugo.io/greyshade/&#34;&gt;greyshade&lt;/a&gt;. Hugo themes are &lt;em&gt;really&lt;/em&gt; easy to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd brianz/themes
$ git clone https://github.com/cxfksword/greyshade.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t especially like the &lt;code&gt;.toml&lt;/code&gt; syntax which is what you get by default for the config file. I
change &lt;code&gt;config.toml&lt;/code&gt; into &lt;code&gt;config.yaml&lt;/code&gt;. The main thing is that I don&amp;rsquo;t like needed to add quotes
around everything in the &lt;code&gt;toml&lt;/code&gt; files. With yaml, I can just write stuff like this&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl: http://brianz.bz/
languageCode: en-us
title: Brian Z
theme: greyshade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wanted syntax highlighting, so installed &lt;code&gt;pygments&lt;/code&gt; inside a virtual environment. Also, there are
different &amp;ldquo;themes&amp;rdquo; for syntax highlighting which can be looked up directly from pygments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkvirtualenv hugo
$ pip install pygments
$ python
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from pygments.styles import get_all_styles
&amp;gt;&amp;gt;&amp;gt; list(get_all_styles())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ended up using the &lt;code&gt;lovelace&lt;/code&gt; theme by setting &lt;code&gt;pygmentsstyle: lovelace&lt;/code&gt; in &lt;code&gt;config.yaml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;, there is a small issue with the greyshade theme in that Hugo will throw an error when
creating a new post. To fix this simply create a file at &lt;code&gt;archetypes/default.md&lt;/code&gt; with the following
contents (or customize as you see fit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++

draft=true
tags = []

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that, I can now create new posts and see it in real-time using &lt;code&gt;hugo server --buildDrafts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that things are working, I&amp;rsquo;ll talk about publishing things in my next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://blog.brianz.bz/about/</link>
      <pubDate>Mon, 21 Mar 2016 09:07:04 -0600</pubDate>
      
      <guid>http://blog.brianz.bz/about/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://blog.brianz.bz/images/bz-horsetooth-peak.jpg&#34; alt=&#34;brianz&#34; /&gt;&lt;/p&gt;

&lt;p&gt;My name is Brian Zambrano and this is my tiny corner of the internet where I (mostly) talk about
software and related technology. I currently reside in Fort Collins, CO with my wife and twin boys.
In addition to software I really like the outdoors, coffee and cycling.&lt;/p&gt;

&lt;h2 id=&#34;background:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;You can read more about my professional background on my LinkedIn profile to the
left. In a nutshell, I grew up in Sunnyvale, CA and originally studied &lt;a href=&#34;http://mate.calpoly.edu&#34;&gt;Materials
Engineering&lt;/a&gt; at Cal Poly, San Luis Obispo. I ended up back home in the
middle of the first dot-com boom in 2000 and fell into software. Eventually I got a second degree
in computer science from &lt;a href=&#34;http://cs.sfsu.edu&#34;&gt;San Francisco State&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;areas-of-interest:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Areas of interest&lt;/h2&gt;

&lt;p&gt;I taught myself Python around 2001 and have been using continually since then and professionally
since 2005. In addition to Python my current areas of interest are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Docker &amp;larr; &lt;em&gt;probably better described as my current love interest&lt;/em&gt; &amp;hearts;&lt;/li&gt;
&lt;li&gt;Microservice design and architecture&lt;/li&gt;
&lt;li&gt;Amazon web services&lt;/li&gt;
&lt;li&gt;Scaling development teams and platforms&lt;/li&gt;
&lt;li&gt;Postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I have &lt;strong&gt;many&lt;/strong&gt; more interests but those are the highlights.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m currently the lead architect at &lt;a href=&#34;http://clearcareonline.com&#34;&gt;Clearcare&lt;/a&gt; building a SAAS
platform for in-home health care agencies.&lt;/p&gt;

&lt;h2 id=&#34;roastlog:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;RoastLog&lt;/h2&gt;

&lt;p&gt;In 2008 I had an idea for a SAAS platform for coffee roasters. That idea grew and turned into
&lt;a href=&#34;http://roastlog.com/&#34;&gt;RoastLog&lt;/a&gt;. I&amp;rsquo;ve been running RoastLog as a real business since 2009 with my
long-time friend and business partner, Linsey Fan. RoastLog is used every day of the week all over
the world to help coffee roasters run their business.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>